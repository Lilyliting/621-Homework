dU.dnu <- (UT[i, j+1] - UT[i, j-1])/2/dnu
dU.2dS <- (UT[i+1, j] - 2*UT[i, j] + UT[i-1, j])/dS^2
dU.2dnu <- (UT[i, j+1] - 2*UT[i, j] + UT[i, j-1])/dnu^2
dU.dS.dnu <- (UT[i+1, j+1] + UT[i-1, j-1] - UT[i+1, j-1] - UT[i-1, j+1])/4/dS/dnu
dU.dt <- -(1/2*nu[j]*St[i]^2*dU.2dS + 1/2*sigma^2*nu[j]*dU.2dnu +
rou*sigma*nu[j]*St[i]*dU.dS.dnu + r*St[i]*dU.dS +
kappa*(theta - nu[j])*dU.dnu - r*UT[i, j])
UT_1[i, j] <- UT[i, j] - dt*dU.dt
}
}
# boundary conditon
UT_1[1, ] <- UT_1[2, ] + dS # S=Smin
UT_1[Ns+1, ] <- 0 # S=Smax
# When nu = NUmax,  U(Si, NUmax, tn) = Si.
# This column is identical in every step
# When nu = NUmin
for (l in 2:Ns) {
dU.dS <- (UT[l+1, 1] - UT[l-1, 1])/2/dS
dU.dnu <- (UT[l, 2] - UT[l, 1])/dnu
dU.dt <- r*UT[l, 1] - r*St[l]*dU.dS - kappa*theta*dU.dnu
UT_1[l, 1] <- UT[l, 1] - dt*dU.dt
}
UT <- UT_1
}
}
Option_Heston <- function(S0=1, K=1, V0=0.1, theta=0.1, sigma=0.1, rou=-0.3, lambda=0,
kappa=2, Tm=5, r=0, Nt=10000, Ns=40, Nj=40) {
# Only for pricing European Put option in Heston model
# Define maximum and minimun values for S, Nu, t
Smin <- 0
Smax <- 2*K
NUmin <- 0
NUmax <- 0.5
Tmin <- 0
Tmax <- Tm
# Building a uniform grid
dS <- (Smax - Smin)/Ns
St <- seq(Smin, Smax, by = dS)
dnu <- (NUmax - NUmin)/Nj
nu <- seq(NUmin, NUmax, by = dnu)
dt <- (Tmax - Tmin)/Nt
# initialise asset prices at maturity
ST <- matrix(ncol = Nj + 1, nrow = Ns + 1)
for (i in 1:(Ns+1)) {ST[i, ] <- St[i]}
# initialise option values at maturity
UT <- ST
for (i in 1:(Ns+1)) {UT[i, ] <- pmax(K - UT[i, ], 0)}
# At time t-dt
UT_1 <- UT
# step back
for (k in 1:Nt) {
# by time
for (i in 2:Ns) {
# by S
for (j in 2:Nj) {
# by nu
# Based on the partial differential equation, calculate dU/dt
# Then by dU/dt = ((U(t) - U(t-dt)))/dt, calcuate U(t-dt)
dU.dS <- (UT[i+1, j] - UT[i-1, j])/2/dS
dU.dnu <- (UT[i, j+1] - UT[i, j-1])/2/dnu
dU.2dS <- (UT[i+1, j] - 2*UT[i, j] + UT[i-1, j])/dS^2
dU.2dnu <- (UT[i, j+1] - 2*UT[i, j] + UT[i, j-1])/dnu^2
dU.dS.dnu <- (UT[i+1, j+1] + UT[i-1, j-1] - UT[i+1, j-1] - UT[i-1, j+1])/4/dS/dnu
dU.dt <- -(1/2*nu[j]*St[i]^2*dU.2dS + 1/2*sigma^2*nu[j]*dU.2dnu +
rou*sigma*nu[j]*St[i]*dU.dS.dnu + r*St[i]*dU.dS +
kappa*(theta - nu[j])*dU.dnu - r*UT[i, j])
UT_1[i, j] <- UT[i, j] - dt*dU.dt
}
}
# boundary conditon
UT_1[1, ] <- UT_1[2, ] + dS # S=Smin
UT_1[Ns+1, ] <- 0 # S=Smax
# When nu = NUmax,  U(Si, NUmax, tn) = Si.
# This column is identical in every step
# When nu = NUmin
for (l in 2:Ns) {
dU.dS <- (UT[l+1, 1] - UT[l-1, 1])/2/dS
dU.dnu <- (UT[l, 2] - UT[l, 1])/dnu
dU.dt <- r*UT[l, 1] - r*St[l]*dU.dS - kappa*theta*dU.dnu
UT_1[l, 1] <- UT[l, 1] - dt*dU.dt
}
UT <- UT_1
}
}
K <- c(0.5, 0.75, 1, 1.25, 1.5)
kappa <- c(1, 2, 4)
temp <- as.data.frame(matrix(rep(0, 15), nrow = 5))
comparetable <- data.frame(temp)
rownames(comparetable) <- as.character(K)
for (i in 1:5) {
k <- K[i]
kap <- kappa[j]
PP <- Option_Heston(K = k, kappa = kap)
comparetable[i, j] <- PP
for (j in 1:3) {
}
}
Real_value <- c(0.543017, 0.385109, 0.273303, 0.195434, 0.14121)
comparetable <- data.frame(comparetable, Real_value)
colnames(comparetable)[1:3] <- c("kappa=1","kappa=2","kappa=4")
K <- c(0.5, 0.75, 1, 1.25, 1.5)
Option_Heston <- function(S0=1, K=1, V0=0.1, theta=0.1, sigma=0.1, rou=-0.3, lambda=0,
kappa=2, Tm=5, r=0, Nt=10000, Ns=40, Nj=40) {
# Only for pricing European Put option in Heston model
# Define maximum and minimun values for S, Nu, t
Smin <- 0
Smax <- 2*K
NUmin <- 0
NUmax <- 0.5
Tmin <- 0
Tmax <- Tm
# Building a uniform grid
dS <- (Smax - Smin)/Ns
St <- seq(Smin, Smax, by = dS)
dnu <- (NUmax - NUmin)/Nj
nu <- seq(NUmin, NUmax, by = dnu)
dt <- (Tmax - Tmin)/Nt
# initialise asset prices at maturity
ST <- matrix(ncol = Nj + 1, nrow = Ns + 1)
for (i in 1:(Ns+1)) {ST[i, ] <- St[i]}
# initialise option values at maturity
UT <- ST
for (i in 1:(Ns+1)) {UT[i, ] <- pmax(K - UT[i, ], 0)}
# At time t-dt
UT_1 <- UT
# step back
for (k in 1:Nt) {
# by time
for (i in 2:Ns) {
# by S
for (j in 2:Nj) {
# by nu
# Based on the partial differential equation, calculate dU/dt
# Then by dU/dt = ((U(t) - U(t-dt)))/dt, calcuate U(t-dt)
dU.dS <- (UT[i+1, j] - UT[i-1, j])/2/dS
dU.dnu <- (UT[i, j+1] - UT[i, j-1])/2/dnu
dU.2dS <- (UT[i+1, j] - 2*UT[i, j] + UT[i-1, j])/dS^2
dU.2dnu <- (UT[i, j+1] - 2*UT[i, j] + UT[i, j-1])/dnu^2
dU.dS.dnu <- (UT[i+1, j+1] + UT[i-1, j-1] - UT[i+1, j-1] - UT[i-1, j+1])/4/dS/dnu
dU.dt <- -(1/2*nu[j]*St[i]^2*dU.2dS + 1/2*sigma^2*nu[j]*dU.2dnu +
rou*sigma*nu[j]*St[i]*dU.dS.dnu + r*St[i]*dU.dS +
kappa*(theta - nu[j])*dU.dnu - r*UT[i, j])
UT_1[i, j] <- UT[i, j] - dt*dU.dt
}
}
# boundary conditon
UT_1[1, ] <- UT_1[2, ] + dS # S=Smin
UT_1[Ns+1, ] <- 0 # S=Smax
# When nu = NUmax,  U(Si, NUmax, tn) = Si.
# This column is identical in every step
# When nu = NUmin
for (l in 2:Ns) {
dU.dS <- (UT[l+1, 1] - UT[l-1, 1])/2/dS
dU.dnu <- (UT[l, 2] - UT[l, 1])/dnu
dU.dt <- r*UT[l, 1] - r*St[l]*dU.dS - kappa*theta*dU.dnu
UT_1[l, 1] <- UT[l, 1] - dt*dU.dt
}
UT <- UT_1
}
}
K <- c(0.5, 0.75, 1, 1.25, 1.5)
kappa <- c(1, 2, 4)
temp <- as.data.frame(matrix(rep(0, 15), nrow = 5))
comparetable <- data.frame(temp)
rownames(comparetable) <- as.character(K)
View(comparetable)
for (i in 1:5) {
k <- K[i]
kap <- 2
PP <- Option_Heston(K = k, kappa = kap)
comparetable[i, j] <- PP
}
k <- K[i]
kap <- 2
PP <- Option_Heston(K = k, kappa = kap)
Option_Heston <- function(S0=1, K=1, V0=0.1, theta=0.1, sigma=0.1, rou=-0.3, lambda=0,
kappa=2, Tm=5, r=0, Nt=10000, Ns=40, Nj=40) {
# Only for pricing European Put option in Heston model
# Define maximum and minimun values for S, Nu, t
Smin <- 0
Smax <- 2*S0
NUmin <- 0
NUmax <- 0.5
Tmin <- 0
Tmax <- Tm
# Building a uniform grid
dS <- (Smax - Smin)/Ns
St <- seq(Smin, Smax, by = dS)
dnu <- (NUmax - NUmin)/Nj
nu <- seq(NUmin, NUmax, by = dnu)
dt <- (Tmax - Tmin)/Nt
# initialise asset prices at maturity
ST <- matrix(ncol = Nj + 1, nrow = Ns + 1)
for (i in 1:(Ns+1)) {ST[i, ] <- St[i]}
# initialise option values at maturity
UT <- ST
for (i in 1:(Ns+1)) {UT[i, ] <- pmax(K - UT[i, ], 0)}
# At time t-dt
UT_1 <- UT
# step back
for (k in 1:Nt) {
# by time
for (i in 2:Ns) {
# by S
for (j in 2:Nj) {
# by nu
# Based on the partial differential equation, calculate dU/dt
# Then by dU/dt = ((U(t) - U(t-dt)))/dt, calcuate U(t-dt)
dU.dS <- (UT[i+1, j] - UT[i-1, j])/2/dS
dU.dnu <- (UT[i, j+1] - UT[i, j-1])/2/dnu
dU.2dS <- (UT[i+1, j] - 2*UT[i, j] + UT[i-1, j])/dS^2
dU.2dnu <- (UT[i, j+1] - 2*UT[i, j] + UT[i, j-1])/dnu^2
dU.dS.dnu <- (UT[i+1, j+1] + UT[i-1, j-1] - UT[i+1, j-1] - UT[i-1, j+1])/4/dS/dnu
dU.dt <- -(1/2*nu[j]*St[i]^2*dU.2dS + 1/2*sigma^2*nu[j]*dU.2dnu +
rou*sigma*nu[j]*St[i]*dU.dS.dnu + r*St[i]*dU.dS +
kappa*(theta - nu[j])*dU.dnu - r*UT[i, j])
UT_1[i, j] <- UT[i, j] - dt*dU.dt
}
}
# boundary conditon
UT_1[1, ] <- UT_1[2, ] + dS # S=Smin
UT_1[Ns+1, ] <- 0 # S=Smax
# When nu = NUmax,  U(Si, NUmax, tn) = Si.
# This column is identical in every step
# When nu = NUmin
for (l in 2:Ns) {
dU.dS <- (UT[l+1, 1] - UT[l-1, 1])/2/dS
dU.dnu <- (UT[l, 2] - UT[l, 1])/dnu
dU.dt <- r*UT[l, 1] - r*St[l]*dU.dS - kappa*theta*dU.dnu
UT_1[l, 1] <- UT[l, 1] - dt*dU.dt
}
UT <- UT_1
}
}
Option_Heston()
ii <- floor(S0/ds)
S0=1
K=1
V0=0.1
theta=0.1
sigma=0.1
rou=-0.3
lambda=0
kappa = 2
Tm=5
sigma=0.25
r=0
Nt=10000
Ns=40
Nj=40
# Define maximum and minimun values for S, Nu, t
Smin <- 0
Smax <- 2*K
NUmin <- 0
NUmax <- 0.5
Tmin <- 0
Tmax <- Tm
# Building a uniform grid
dS <- (Smax - Smin)/Ns
St <- seq(Smin, Smax, by = dS)
dnu <- (NUmax - NUmin)/Nj
nu <- seq(NUmin, NUmax, by = dnu)
dt <- (Tmax - Tmin)/Nt
# initialise asset prices at maturity
ST <- matrix(ncol = Nj + 1, nrow = Ns + 1)
for (i in 1:(Ns+1)) {ST[i, ] <- St[i]}
# initialise option values at maturity
UT <- ST
for (i in 1:(Ns+1)) {UT[i, ] <- pmax(K - UT[i, ], 0)}
ii <- floor(S0/dS)
jj <- V0/dnu
S0=1
K=1
V0=0.1
theta=0.1
sigma=0.1
rou=-0.3
lambda=0
kappa = 2
Tm=5
sigma=0.25
r=0
Nt=10000
Ns=40
Nj=40
# Define maximum and minimun values for S, Nu, t
Smin <- 0
Smax <- 2*K
NUmin <- 0
NUmax <- 0.5
Tmin <- 0
Tmax <- Tm
# Building a uniform grid
dS <- (Smax - Smin)/Ns
St <- seq(Smin, Smax, by = dS)
dnu <- (NUmax - NUmin)/Nj
nu <- seq(NUmin, NUmax, by = dnu)
dt <- (Tmax - Tmin)/Nt
# initialise asset prices at maturity
ST <- matrix(ncol = Nj + 1, nrow = Ns + 1)
for (i in 1:(Ns+1)) {ST[i, ] <- St[i]}
# initialise option values at maturity
UT <- ST
for (i in 1:(Ns+1)) {UT[i, ] <- pmax(K - UT[i, ], 0)}
# At time t-dt
UT_1 <- UT
# step back
for (k in 1:Nt) {
# by time
for (i in 2:Ns) {
# by S
for (j in 2:Nj) {
# by nu
# Based on the partial differential equation, calculate dU/dt
# Then by dU/dt = ((U(t) - U(t-dt)))/dt, calcuate U(t-dt)
dU.dS <- (UT[i+1, j] - UT[i-1, j])/2/dS
dU.dnu <- (UT[i, j+1] - UT[i, j-1])/2/dnu
dU.2dS <- (UT[i+1, j] - 2*UT[i, j] + UT[i-1, j])/dS^2
dU.2dnu <- (UT[i, j+1] - 2*UT[i, j] + UT[i, j-1])/dnu^2
dU.dS.dnu <- (UT[i+1, j+1] + UT[i-1, j-1] - UT[i+1, j-1] - UT[i-1, j+1])/4/dS/dnu
dU.dt <- -(1/2*nu[j]*St[i]^2*dU.2dS + 1/2*sigma^2*nu[j]*dU.2dnu +
rou*sigma*nu[j]*St[i]*dU.dS.dnu + r*St[i]*dU.dS +
kappa*(theta - nu[j])*dU.dnu - r*UT[i, j])
UT_1[i, j] <- UT[i, j] - dt*dU.dt
}
}
# boundary conditon
UT_1[1, ] <- UT_1[2, ] + dS # S=Smin
UT_1[Ns+1, ] <- 0 # S=Smax
# When nu = NUmax,  U(Si, NUmax, tn) = Si.
# This column is identical in every step
# When nu = NUmin
for (l in 2:Ns) {
dU.dS <- (UT[l+1, 1] - UT[l-1, 1])/2/dS
dU.dnu <- (UT[l, 2] - UT[l, 1])/dnu
dU.dt <- r*UT[l, 1] - r*St[l]*dU.dS - kappa*theta*dU.dnu
UT_1[l, 1] <- UT[l, 1] - dt*dU.dt
}
UT <- UT_1
}
ii <- S0/dS + 1
ii1 <- floor(ii)
ii2 <- ceiling(ii)
jj <- V0/dnu + 1
jj1 <- floor(jj)
jj2 <- ceiling(jj)
ans <- (jj2 - jj)((ii2 - ii)*UT[ii1, jj1] + (ii - ii1)*UT[ii2, jj1]) +
(jj - jj1)((ii2 - ii)*UT[ii1, jj2] + (ii - ii1)*UT[ii2, jj2])
ans
ii <- S0/dS + 1
ii1 <- floor(ii)
ii2 <- ceiling(ii)
jj <- V0/dnu + 1
jj1 <- floor(jj)
jj2 <- ceiling(jj)
UT
UT[ii1, jj1]
UT[ii2, jj1]
UT[ii1, jj2]
UT[ii2, jj2]
ii <- S0/dS - 1
jj <- V0/dnu - 1
UT[ii1, jj1]
ii <- S0/dS + 1
ii1 <- (floor(ii) + ceiling(ii))/2
jj <- V0/dnu + 1
jj1 <- (floor(jj) + ceiling(jj))/2
ans <- UT[ii1, jj1]
Option_Heston <- function(S0=1, K=1, V0=0.1, theta=0.1, sigma=0.1, rou=-0.3, lambda=0,
kappa=2, Tm=5, r=0, Nt=10000, Ns=40, Nj=40) {
# Only for pricing European Put option in Heston model
# Define maximum and minimun values for S, Nu, t
Smin <- 0
Smax <- 2*S0
NUmin <- 0
NUmax <- 0.5
Tmin <- 0
Tmax <- Tm
# Building a uniform grid
dS <- (Smax - Smin)/Ns
St <- seq(Smin, Smax, by = dS)
dnu <- (NUmax - NUmin)/Nj
nu <- seq(NUmin, NUmax, by = dnu)
dt <- (Tmax - Tmin)/Nt
# initialise asset prices at maturity
ST <- matrix(ncol = Nj + 1, nrow = Ns + 1)
for (i in 1:(Ns+1)) {ST[i, ] <- St[i]}
# initialise option values at maturity
UT <- ST
for (i in 1:(Ns+1)) {UT[i, ] <- pmax(K - UT[i, ], 0)}
# At time t-dt
UT_1 <- UT
# step back
for (k in 1:Nt) {
# by time
for (i in 2:Ns) {
# by S
for (j in 2:Nj) {
# by nu
# Based on the partial differential equation, calculate dU/dt
# Then by dU/dt = ((U(t) - U(t-dt)))/dt, calcuate U(t-dt)
dU.dS <- (UT[i+1, j] - UT[i-1, j])/2/dS
dU.dnu <- (UT[i, j+1] - UT[i, j-1])/2/dnu
dU.2dS <- (UT[i+1, j] - 2*UT[i, j] + UT[i-1, j])/dS^2
dU.2dnu <- (UT[i, j+1] - 2*UT[i, j] + UT[i, j-1])/dnu^2
dU.dS.dnu <- (UT[i+1, j+1] + UT[i-1, j-1] - UT[i+1, j-1] - UT[i-1, j+1])/4/dS/dnu
dU.dt <- -(1/2*nu[j]*St[i]^2*dU.2dS + 1/2*sigma^2*nu[j]*dU.2dnu +
rou*sigma*nu[j]*St[i]*dU.dS.dnu + r*St[i]*dU.dS +
kappa*(theta - nu[j])*dU.dnu - r*UT[i, j])
UT_1[i, j] <- UT[i, j] - dt*dU.dt
}
}
# boundary conditon
UT_1[1, ] <- UT_1[2, ] + dS # S=Smin
UT_1[Ns+1, ] <- 0 # S=Smax
# When nu = NUmax,  U(Si, NUmax, tn) = Si.
# This column is identical in every step
# When nu = NUmin
for (l in 2:Ns) {
dU.dS <- (UT[l+1, 1] - UT[l-1, 1])/2/dS
dU.dnu <- (UT[l, 2] - UT[l, 1])/dnu
dU.dt <- r*UT[l, 1] - r*St[l]*dU.dS - kappa*theta*dU.dnu
UT_1[l, 1] <- UT[l, 1] - dt*dU.dt
}
UT <- UT_1
}
ii <- S0/dS + 1
ii1 <- (floor(ii) + ceiling(ii))/2
jj <- V0/dnu + 1
jj1 <- (floor(jj) + ceiling(jj))/2
ans <- UT[ii1, jj1]
return(ans)
}
Option_Heston()
Option_Heston <- function(S0=1, K=1, V0=0.1, theta=0.1, sigma=0.1, rou=-0.3, lambda=0,
kappa=2, Tm=5, r=0, Nt=10000, Ns=40, Nj=40) {
# Only for pricing European Put option in Heston model
# Define maximum and minimun values for S, Nu, t
Smin <- 0
Smax <- 2*S0
NUmin <- 0
NUmax <- 0.5
Tmin <- 0
Tmax <- Tm
# Building a uniform grid
dS <- (Smax - Smin)/Ns
St <- seq(Smin, Smax, by = dS)
dnu <- (NUmax - NUmin)/Nj
nu <- seq(NUmin, NUmax, by = dnu)
dt <- (Tmax - Tmin)/Nt
# initialise asset prices at maturity
ST <- matrix(ncol = Nj + 1, nrow = Ns + 1)
for (i in 1:(Ns+1)) {ST[i, ] <- St[i]}
# initialise option values at maturity
UT <- ST
for (i in 1:(Ns+1)) {UT[i, ] <- pmax(K - UT[i, ], 0)}
# At time t-dt
UT_1 <- UT
# step back
for (k in 1:Nt) {
# by time
for (i in 2:Ns) {
# by S
for (j in 2:Nj) {
# by nu
# Based on the partial differential equation, calculate dU/dt
# Then by dU/dt = ((U(t) - U(t-dt)))/dt, calcuate U(t-dt)
dU.dS <- (UT[i+1, j] - UT[i-1, j])/2/dS
dU.dnu <- (UT[i, j+1] - UT[i, j-1])/2/dnu
dU.2dS <- (UT[i+1, j] - 2*UT[i, j] + UT[i-1, j])/dS^2
dU.2dnu <- (UT[i, j+1] - 2*UT[i, j] + UT[i, j-1])/dnu^2
dU.dS.dnu <- (UT[i+1, j+1] + UT[i-1, j-1] - UT[i+1, j-1] - UT[i-1, j+1])/4/dS/dnu
dU.dt <- -(1/2*nu[j]*St[i]^2*dU.2dS + 1/2*sigma^2*nu[j]*dU.2dnu +
rou*sigma*nu[j]*St[i]*dU.dS.dnu + r*St[i]*dU.dS +
kappa*(theta - nu[j])*dU.dnu - r*UT[i, j])
UT_1[i, j] <- UT[i, j] - dt*dU.dt
}
}
# boundary conditon
UT_1[1, ] <- UT_1[2, ] + dS # S=Smin
UT_1[Ns+1, ] <- 0 # S=Smax
# When nu = NUmax,  U(Si, NUmax, tn) = Si.
# This column is identical in every step
# When nu = NUmin
for (l in 2:Ns) {
dU.dS <- (UT[l+1, 1] - UT[l-1, 1])/2/dS
dU.dnu <- (UT[l, 2] - UT[l, 1])/dnu
dU.dt <- r*UT[l, 1] - r*St[l]*dU.dS - kappa*theta*dU.dnu
UT_1[l, 1] <- UT[l, 1] - dt*dU.dt
}
UT <- UT_1
}
ii <- S0/dS + 1
ii1 <- (floor(ii) + ceiling(ii))/2
jj <- V0/dnu + 1
jj1 <- (floor(jj) + ceiling(jj))/2
ans <- UT[ii1, jj1]
return(ans)
}
K <- c(0.5, 0.75, 1, 1.25, 1.5)
kappa <- c(1, 2, 4)
temp <- as.data.frame(matrix(rep(0, 15), nrow = 5))
comparetable <- data.frame(temp)
rownames(comparetable) <- as.character(K)
for (i in 1:5) {
for (j in 1:3) {
k <- K[i]
kap <- kappa[j]
PP <- Option_Heston(K = k, kappa = kap)
comparetable[i, j] <- PP
}
}
