}
# Out the money
zeta_v <- function(v, r, Tm, mu, sigma, a, N) {
ans <- exp(-r*Tm)*(1/(1 + 1i*v) - exp(r*Tm)/(1i*v) -
phi_u(v - 1i, mu, sigma, a, N)/(v^2 - 1i*v))
return(ans)
}
gamma_v <- function(v, r, Tm, mu, sigma, alpha, a, N) {
ans <- (zeta_v(v - 1i*alpha, r, Tm, mu, sigma, a, N)-
zeta_v(v + 1i*alpha, r, Tm, mu, sigma, a, N))/2
return(ans)
}
# In the money
psi_v <- function(v, r, Tm, mu, sigma, alpha, a, N) {
ans <- (exp(-r*Tm)*phi_u(v - (alpha + 1)*1i, mu, sigma, a, N))/
(alpha^2 + alpha - v^2 + 1i*(2*alpha + 1)*v)
return(ans)
}
Call_option <- function(u, r, Tm, mu, sigma, alpha, a, N) {
ku <- -b + lambda*(u-1)
s <- seq(0.0001, a, length.out = N)
h <- s[2] - s[1]
wn <- rep(c(2*h/3, 4*h/3), floor(N/2))
wn[1] <- h/3
wn[N] <- h/3
j <- seq(1, N)
vj <- (j-1)*eta
f <- exp(-1i*2*pi/N*(j-1)*(u-1))*exp(1i*b*vj)*psi_v(vj, r, Tm, r, sigma, alpha)
C <- exp(-alpha*k)/pi*sum(f*wn)
return(C)
}
Call_option(58, r, Tm, r, sigma, alpha, a, N)
Option_BSM <- function(isCall = T, S0=1, K=70, Tm=1, sigma=0.2, r=0.0075, div=0) {
d1 <- (log(S0/K) + (r - div + sigma^2/2)*Tm)/sigma/sqrt(Tm)
d2 <- d1 - sigma*sqrt(Tm)
if (isCall) {p <- S0*exp(-div*Tm)*pnorm(d1) - K*exp(-r*Tm)*pnorm(d2)}
else {p <- K*exp(-r*Tm)*pnorm(-d2) - S0*exp(-div*Tm)*pnorm(-d1)}
return(p)
}
Option_BSM()
S0=1
Tm=1
sigma=0.2
r=0.0075
div=0
alpha <- 1
N <- 10000
eta <- 5
lambda <- 2*pi/N/eta
a <- N*eta # the effective upper limit for the integration
b <- N*lambda/2
a
b
u=58
-b + lambda*(u-1)
# for phi_T
f_phi<- function(u, s, mu, sigma) {
# integrand
ans <- 1/sqrt(2*pi*sigma^2)*exp(-(s-mu)^2/2/sigma^2)*exp(1i*u*s)
return(ans)
}
phi_u <- function(u, mu, sigma, a, N) {
# Integral
# By the Simpson’s rule
s <- seq(-a, a, length.out = N)
h <- s[2] - s[1]
wn <- rep(c(2*h/3, 4*h/3), floor(N/2))
wn[1] <- h/3
wn[N] <- h/3
fn <- sapply(s, f_phi, u = u, mu = mu, sigma = sigma)
ans <- sum(fn*wn)
return(ans)
}
# Out the money
zeta_v <- function(v, r, Tm, mu, sigma, a, N) {
ans <- exp(-r*Tm)*(1/(1 + 1i*v) - exp(r*Tm)/(1i*v) -
phi_u(v - 1i, mu, sigma, a, N)/(v^2 - 1i*v))
return(ans)
}
gamma_v <- function(v, r, Tm, mu, sigma, alpha, a, N) {
ans <- (zeta_v(v - 1i*alpha, r, Tm, mu, sigma, a, N)-
zeta_v(v + 1i*alpha, r, Tm, mu, sigma, a, N))/2
return(ans)
}
# In the money
psi_v <- function(v, r, Tm, mu, sigma, alpha, a, N) {
ans <- (exp(-r*Tm)*phi_u(v - (alpha + 1)*1i, mu, sigma, a, N))/
(alpha^2 + alpha - v^2 + 1i*(2*alpha + 1)*v)
return(ans)
}
Call_option <- function(u, r, Tm, mu, sigma, alpha, a, N) {
ku <- -b + lambda*(u-1)
s <- seq(0.0001, a, length.out = N)
h <- s[2] - s[1]
wn <- rep(c(2*h/3, 4*h/3), floor(N/2))
wn[1] <- h/3
wn[N] <- h/3
j <- seq(1, N)
vj <- (j-1)*eta
f <- exp(-1i*2*pi/N*(j-1)*(u-1))*exp(1i*b*vj)*psi_v(vj, r, Tm, r, sigma, alpha, a, N)
C <- exp(-alpha*k)/pi*sum(f*wn)
return(C)
}
Call_option(58, r, Tm, r, sigma, alpha, a, N)
Option_BSM <- function(isCall = T, S0=1, K=70, Tm=1, sigma=0.2, r=0.0075, div=0) {
d1 <- (log(S0/K) + (r - div + sigma^2/2)*Tm)/sigma/sqrt(Tm)
d2 <- d1 - sigma*sqrt(Tm)
if (isCall) {p <- S0*exp(-div*Tm)*pnorm(d1) - K*exp(-r*Tm)*pnorm(d2)}
else {p <- K*exp(-r*Tm)*pnorm(-d2) - S0*exp(-div*Tm)*pnorm(-d1)}
return(p)
}
Option_BSM()
S0=1
Tm=1
sigma=0.2
r=0.0075
div=0
alpha <- 1
N <- 100
eta <- 5
lambda <- 2*pi/N/eta
a <- N*eta # the effective upper limit for the integration
b <- N*lambda/2
a
b
u=58
-b + lambda*(u-1)
# for phi_T
f_phi<- function(u, s, mu, sigma) {
# integrand
ans <- 1/sqrt(2*pi*sigma^2)*exp(-(s-mu)^2/2/sigma^2)*exp(1i*u*s)
return(ans)
}
phi_u <- function(u, mu, sigma, a, N) {
# Integral
# By the Simpson’s rule
s <- seq(-a, a, length.out = N)
h <- s[2] - s[1]
wn <- rep(c(2*h/3, 4*h/3), floor(N/2))
wn[1] <- h/3
wn[N] <- h/3
fn <- sapply(s, f_phi, u = u, mu = mu, sigma = sigma)
ans <- sum(fn*wn)
return(ans)
}
# Out the money
zeta_v <- function(v, r, Tm, mu, sigma, a, N) {
ans <- exp(-r*Tm)*(1/(1 + 1i*v) - exp(r*Tm)/(1i*v) -
phi_u(v - 1i, mu, sigma, a, N)/(v^2 - 1i*v))
return(ans)
}
gamma_v <- function(v, r, Tm, mu, sigma, alpha, a, N) {
ans <- (zeta_v(v - 1i*alpha, r, Tm, mu, sigma, a, N)-
zeta_v(v + 1i*alpha, r, Tm, mu, sigma, a, N))/2
return(ans)
}
# In the money
psi_v <- function(v, r, Tm, mu, sigma, alpha, a, N) {
ans <- (exp(-r*Tm)*phi_u(v - (alpha + 1)*1i, mu, sigma, a, N))/
(alpha^2 + alpha - v^2 + 1i*(2*alpha + 1)*v)
return(ans)
}
Call_option <- function(u, r, Tm, mu, sigma, alpha, a, N) {
ku <- -b + lambda*(u-1)
s <- seq(0.0001, a, length.out = N)
h <- s[2] - s[1]
wn <- rep(c(2*h/3, 4*h/3), floor(N/2))
wn[1] <- h/3
wn[N] <- h/3
j <- seq(1, N)
vj <- (j-1)*eta
f <- exp(-1i*2*pi/N*(j-1)*(u-1))*exp(1i*b*vj)*psi_v(vj, r, Tm, r, sigma, alpha, a, N)
C <- exp(-alpha*k)/pi*sum(f*wn)
return(C)
}
Call_option(58, r, Tm, r, sigma, alpha, a, N)
alpha <- 1
N <- 100
eta <- 5
lambda <- 2*pi/N/eta
a <- N*eta # the effective upper limit for the integration
b <- N*lambda/2
a
b
u=58
-b + lambda*(u-1)
f_phi<- function(u, s, mu, sigma) {
# integrand
ans <- 1/sqrt(2*pi*sigma^2)*exp(-(s-mu)^2/2/sigma^2)*exp(1i*u*s)
return(ans)
}
Option_BSM <- function(isCall = T, S0=1, K=70, Tm=1, sigma=0.2, r=0.0075, div=0) {
d1 <- (log(S0/K) + (r - div + sigma^2/2)*Tm)/sigma/sqrt(Tm)
d2 <- d1 - sigma*sqrt(Tm)
if (isCall) {p <- S0*exp(-div*Tm)*pnorm(d1) - K*exp(-r*Tm)*pnorm(d2)}
else {p <- K*exp(-r*Tm)*pnorm(-d2) - S0*exp(-div*Tm)*pnorm(-d1)}
return(p)
}
Option_BSM()
S0=1
Tm=1
sigma=0.2
r=0.0075
div=0
alpha <- 1
N <- 100
eta <- 5
lambda <- 2*pi/N/eta
a <- N*eta # the effective upper limit for the integration
b <- N*lambda/2
a
b
u=58
-b + lambda*(u-1)
# for phi_T
f_phi<- function(u, s, mu, sigma) {
# integrand
ans <- 1/sqrt(2*pi*sigma^2)*exp(-(s-mu)^2/2/sigma^2)*exp(1i*u*s)
return(ans)
}
phi_u <- function(u, mu, sigma, a, N) {
# Integral
# By the Simpson’s rule
s <- seq(-a, a, length.out = N)
h <- s[2] - s[1]
wn <- rep(c(2*h/3, 4*h/3), floor(N/2))
wn[1] <- h/3
wn[N] <- h/3
fn <- sapply(s, f_phi, u = u, mu = mu, sigma = sigma)
ans <- sum(fn*wn)
return(ans)
}
# Out the money
zeta_v <- function(v, r, Tm, mu, sigma, a, N) {
ans <- exp(-r*Tm)*(1/(1 + 1i*v) - exp(r*Tm)/(1i*v) -
phi_u(v - 1i, mu, sigma, a, N)/(v^2 - 1i*v))
return(ans)
}
gamma_v <- function(v, r, Tm, mu, sigma, alpha, a, N) {
ans <- (zeta_v(v - 1i*alpha, r, Tm, mu, sigma, a, N)-
zeta_v(v + 1i*alpha, r, Tm, mu, sigma, a, N))/2
return(ans)
}
# In the money
psi_v <- function(v, r, Tm, mu, sigma, alpha, a, N) {
ans <- (exp(-r*Tm)*phi_u(v - (alpha + 1)*1i, mu, sigma, a, N))/
(alpha^2 + alpha - v^2 + 1i*(2*alpha + 1)*v)
return(ans)
}
Call_option <- function(u, r, Tm, mu, sigma, alpha, a, N) {
ku <- -b + lambda*(u-1)
s <- seq(0.0001, a, length.out = N)
h <- s[2] - s[1]
wn <- rep(c(2*h/3, 4*h/3), floor(N/2))
wn[1] <- h/3
wn[N] <- h/3
j <- seq(1, N)
vj <- (j-1)*eta
f <- exp(-1i*2*pi/N*(j-1)*(u-1))*exp(1i*b*vj)*psi_v(vj, r, Tm, r, sigma, alpha, a, N)
C <- exp(-alpha*k)/pi*sum(f*wn)
return(C)
}
Call_option(58, r, Tm, r, sigma, alpha, a, N)
Option_BSM <- function(isCall = T, S0=1, K=70, Tm=1, sigma=0.2, r=0.0075, div=0) {
d1 <- (log(S0/K) + (r - div + sigma^2/2)*Tm)/sigma/sqrt(Tm)
d2 <- d1 - sigma*sqrt(Tm)
if (isCall) {p <- S0*exp(-div*Tm)*pnorm(d1) - K*exp(-r*Tm)*pnorm(d2)}
else {p <- K*exp(-r*Tm)*pnorm(-d2) - S0*exp(-div*Tm)*pnorm(-d1)}
return(p)
}
Option_BSM()
S0=1
Tm=1
sigma=0.2
r=0.0075
div=0
alpha <- 1
N <- 100
eta <- 5
lambda <- 2*pi/N/eta
a <- N*eta # the effective upper limit for the integration
b <- N*lambda/2
a
b
u=58
-b + lambda*(u-1)
# for phi_T
f_phi<- function(u, s, mu, sigma) {
# integrand
ans <- 1/sqrt(2*pi*sigma^2)*exp(-(s-mu)^2/2/sigma^2)*exp(1i*u*s)
return(ans)
}
phi_u <- function(u, mu, sigma, a, N) {
# Integral
# By the Simpson’s rule
s <- seq(-a, a, length.out = N)
h <- s[2] - s[1]
wn <- rep(c(2*h/3, 4*h/3), floor(N/2))
wn[1] <- h/3
wn[N] <- h/3
fn <- sapply(s, f_phi, u = u, mu = mu, sigma = sigma)
ans <- sum(fn*wn)
return(ans)
}
# Out the money
zeta_v <- function(v, r, Tm, mu, sigma, a, N) {
ans <- exp(-r*Tm)*(1/(1 + 1i*v) - exp(r*Tm)/(1i*v) -
phi_u(v - 1i, mu, sigma, a, N)/(v^2 - 1i*v))
return(ans)
}
gamma_v <- function(v, r, Tm, mu, sigma, alpha, a, N) {
ans <- (zeta_v(v - 1i*alpha, r, Tm, mu, sigma, a, N)-
zeta_v(v + 1i*alpha, r, Tm, mu, sigma, a, N))/2
return(ans)
}
# In the money
psi_v <- function(v, r, Tm, mu, sigma, alpha, a, N) {
ans <- (exp(-r*Tm)*phi_u(v - (alpha + 1)*1i, mu, sigma, a, N))/
(alpha^2 + alpha - v^2 + 1i*(2*alpha + 1)*v)
return(ans)
}
Call_option <- function(u, r, Tm, mu, sigma, alpha, a, N) {
ku <- -b + lambda*(u-1)
s <- seq(0.0001, a, length.out = N)
h <- s[2] - s[1]
wn <- rep(c(2*h/3, 4*h/3), floor(N/2))
wn[1] <- h/3
wn[N] <- h/3
j <- seq(1, N)
vj <- (j-1)*eta
f <- exp(-1i*2*pi/N*(j-1)*(u-1))*exp(1i*b*vj)*psi_v(vj, r, Tm, r, sigma, alpha, a, N)
C <- exp(-alpha*k)/pi*sum(f*wn)
return(C)
}
Call_option(50, r, Tm, r, sigma, alpha, a, N)
u=50
ku <- -b + lambda*(u-1)
N
u=51
ku <- -b + lambda*(u-1)
Call_FFT <- function(u, r, Tm, mu, sigma, alpha, a, N) {
ku <- -b + lambda*(u-1)
s <- seq(0.0001, a, length.out = N)
h <- s[2] - s[1]
wn <- rep(c(2*h/3, 4*h/3), floor(N/2))
wn[1] <- h/3
wn[N] <- h/3
j <- seq(1, N)
vj <- (j-1)*eta
if (u < ((N+1)/2)) {
f <- exp(-1i*2*pi/N*(j-1)*(u-1))*exp(1i*b*vj)*psi_v(vj, r, Tm, r, sigma, alpha, a, N)
C <- exp(-alpha*k)/pi*sum(f*wn)
} else {
f <- exp(-1i*2*pi/N*(j-1)*(u-1))*exp(1i*b*vj)*gamma_v(vj, r, Tm, r, sigma, alpha, a, N)
C <- sinh(alpha*k)/pi*sum(f*wn)
}
return(C)
}
Call_FFT(50, r, Tm, r, sigma, alpha, a, N)
Option_BSM <- function(isCall = T, S0=1, K=70, Tm=1, sigma=0.2, r=0.0075, div=0) {
d1 <- (log(S0/K) + (r - div + sigma^2/2)*Tm)/sigma/sqrt(Tm)
d2 <- d1 - sigma*sqrt(Tm)
if (isCall) {p <- S0*exp(-div*Tm)*pnorm(d1) - K*exp(-r*Tm)*pnorm(d2)}
else {p <- K*exp(-r*Tm)*pnorm(-d2) - S0*exp(-div*Tm)*pnorm(-d1)}
return(p)
}
Option_BSM(K=)
Option_BSM <- function(isCall = T, S0=1, K=1, Tm=1, sigma=0.2, r=0.0075, div=0) {
d1 <- (log(S0/K) + (r - div + sigma^2/2)*Tm)/sigma/sqrt(Tm)
d2 <- d1 - sigma*sqrt(Tm)
if (isCall) {p <- S0*exp(-div*Tm)*pnorm(d1) - K*exp(-r*Tm)*pnorm(d2)}
else {p <- K*exp(-r*Tm)*pnorm(-d2) - S0*exp(-div*Tm)*pnorm(-d1)}
return(p)
}
K <- (-b + (u-1)*lambda)^2
u=48
Call_FFT(u, r, Tm, r, sigma, alpha, a, N)
K <- (-b + (u-1)*lambda)^2
K
Option_BSM <- function(isCall = T, S0=1, K=1, Tm=1, sigma=0.2, r=0.0075, div=0) {
d1 <- (log(S0/K) + (r - div + sigma^2/2)*Tm)/sigma/sqrt(Tm)
d2 <- d1 - sigma*sqrt(Tm)
if (isCall) {p <- S0*exp(-div*Tm)*pnorm(d1) - K*exp(-r*Tm)*pnorm(d2)}
else {p <- K*exp(-r*Tm)*pnorm(-d2) - S0*exp(-div*Tm)*pnorm(-d1)}
return(p)
}
Option_BSM(K=K)
K
u=60
Call_FFT(u, r, Tm, r, sigma, alpha, a, N)
K <- (-b + (u-1)*lambda)^2
K
Option_BSM <- function(isCall = T, S0=1, K=1, Tm=1, sigma=0.2, r=0.0075, div=0) {
d1 <- (log(S0/K) + (r - div + sigma^2/2)*Tm)/sigma/sqrt(Tm)
d2 <- d1 - sigma*sqrt(Tm)
if (isCall) {p <- S0*exp(-div*Tm)*pnorm(d1) - K*exp(-r*Tm)*pnorm(d2)}
else {p <- K*exp(-r*Tm)*pnorm(-d2) - S0*exp(-div*Tm)*pnorm(-d1)}
return(p)
}
Option_BSM(K=K)
alpha <- 1
N <- 10000
eta <- 50
lambda <- 2*pi/N/eta
a <- N*eta # the effective upper limit for the integration
b <- N*lambda/2 # log of strike prices range from -b to b
f_phi<- function(u, s, mu, sigma) {
# integrand
ans <- 1/sqrt(2*pi*sigma^2)*exp(-(s-mu)^2/2/sigma^2)*exp(1i*u*s)
return(ans)
}
phi_u <- function(u, mu, sigma, a, N) {
# Integral
# By the Simpson’s rule
s <- seq(-a, a, length.out = N)
h <- s[2] - s[1]
wn <- rep(c(2*h/3, 4*h/3), floor(N/2))
wn[1] <- h/3
wn[N] <- h/3
fn <- sapply(s, f_phi, u = u, mu = mu, sigma = sigma)
ans <- sum(fn*wn)
return(ans)
}
S0=1
Tm=1
sigma=0.2
r=0.0075
alpha <- 1
N <- 10000
eta <- 50
lambda <- 2*pi/N/eta
a <- N*eta # the effective upper limit for the integration
b <- N*lambda/2 # log of strike prices range from -b to b
# for phi_T
f_phi<- function(u, s, mu, sigma) {
# integrand
ans <- 1/sqrt(2*pi*sigma^2)*exp(-(s-mu)^2/2/sigma^2)*exp(1i*u*s)
return(ans)
}
phi_u <- function(u, mu, sigma, a, N) {
# Integral
# By the Simpson’s rule
s <- seq(-a, a, length.out = N)
h <- s[2] - s[1]
wn <- rep(c(2*h/3, 4*h/3), floor(N/2))
wn[1] <- h/3
wn[N] <- h/3
fn <- sapply(s, f_phi, u = u, mu = mu, sigma = sigma)
ans <- sum(fn*wn)
return(ans)
}
# Out the money
zeta_v <- function(v, r, Tm, mu, sigma, a, N) {
ans <- exp(-r*Tm)*(1/(1 + 1i*v) - exp(r*Tm)/(1i*v) -
phi_u(v - 1i, mu, sigma, a, N)/(v^2 - 1i*v))
return(ans)
}
gamma_v <- function(v, r, Tm, mu, sigma, alpha, a, N) {
ans <- (zeta_v(v - 1i*alpha, r, Tm, mu, sigma, a, N)-
zeta_v(v + 1i*alpha, r, Tm, mu, sigma, a, N))/2
return(ans)
}
# In the money
psi_v <- function(v, r, Tm, mu, sigma, alpha, a, N) {
ans <- (exp(-r*Tm)*phi_u(v - (alpha + 1)*1i, mu, sigma, a, N))/
(alpha^2 + alpha - v^2 + 1i*(2*alpha + 1)*v)
return(ans)
}
Call_FFT <- function(u, r, Tm, mu, sigma, alpha, a, N) {
ku <- -b + lambda*(u-1)
s <- seq(0.0001, a, length.out = N)
h <- s[2] - s[1]
wn <- rep(c(2*h/3, 4*h/3), floor(N/2))
wn[1] <- h/3
wn[N] <- h/3
j <- seq(1, N)
vj <- (j-1)*eta
if (u < ((N+1)/2)) {
f <- exp(-1i*2*pi/N*(j-1)*(u-1))*exp(1i*b*vj)*psi_v(vj, r, Tm, r, sigma, alpha, a, N)
C <- exp(-alpha*k)/pi*sum(f*wn)
} else {
f <- exp(-1i*2*pi/N*(j-1)*(u-1))*exp(1i*b*vj)*gamma_v(vj, r, Tm, r, sigma, alpha, a, N)
C <- sinh(alpha*k)/pi*sum(f*wn)
}
return(C)
}
u=60
Call_FFT(u, r, Tm, r, sigma, alpha, a, N)
K <- (-b + (u-1)*lambda)^2
Option_BSM <- function(isCall = T, S0=1, K=1, Tm=1, sigma=0.2, r=0.0075, div=0) {
d1 <- (log(S0/K) + (r - div + sigma^2/2)*Tm)/sigma/sqrt(Tm)
d2 <- d1 - sigma*sqrt(Tm)
if (isCall) {p <- S0*exp(-div*Tm)*pnorm(d1) - K*exp(-r*Tm)*pnorm(d2)}
else {p <- K*exp(-r*Tm)*pnorm(-d2) - S0*exp(-div*Tm)*pnorm(-d1)}
return(p)
}
Option_BSM(K=K)
beta <- 1
re5 <- optimization(beta)
alpha <- re3[2]
rho <- re3[3]
nu <- re3[4]
column <- 7 # choose 7th maturity which is 10 years
Vol2 <- swaptions[seq(1, 38, by=2), 9]/100 # At-the-money volatility
Strike2 <- swaptions[seq(2, 38, by=2), 9]/100 # Strike price K
VolB <- SABRVol(alpha,beta,rho,nu,expiry,Strike2)
plot(expiry, Vol2, type = "l", col = "red", ylab = "volitility")
lines(expiry, VolB, col = "blue")
legend("topright", legend=c("Benchmark", "Calculated vol"),
col=c("red", "blue"), lty=c(1,1))
obj <- sum((VolB-Vol2)^2)
obj
