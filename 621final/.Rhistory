}
SPX <- SPX[!duplicated(SPX[, 2:3], fromLast = T), ]
head(SPX)
Option_BSM <- function(S0, K, Tm, sigma, r=r0, div=0) {
# Pricing by Black Scholes
d1 <- (log(S0/K) + (r - div + sigma^2/2)*Tm)/sigma/sqrt(Tm)
d2 <- d1 - sigma*sqrt(Tm)
p <- S0*exp(-div*Tm)*pnorm(d1) - K*exp(-r*Tm)*pnorm(d2)
return(p)
}
fsigma <- function(sigma, Tm, K, price) {
# Epsilon. To calculate implied vol
S0 <- price0
price.by.bs <- Option_BSM(S0, K, Tm, sigma)
ans <- price.by.bs - price
return(ans)
}
imp_vol <- function(Tm, K, price) {
# use bisection method to calculate implied vols
a <- 0.0001
b <- 10
epsilon <- abs(a - b)
while(epsilon > 1e-4) {
mid <- (a + b)/2
if (fsigma(mid, Tm, K, price)*fsigma(b, Tm, K, price) < 0 ) a <- mid
else b <- mid
epsilon <- abs(a - b)
}
return(a)
}
Implied_Vol <- SPX[, 1]
for(i in 1:nrow(SPX)) {
price <- SPX[i, 4]
Tm <- SPX[i, 2]
K <- SPX[i, 3]
Implied_Vol[i] <- imp_vol(Tm, K, price)
}
head(Implied_Vol)
newdf <- data.frame(SPX[, -1], Implied_Vol)
newdf <- subset(newdf, Implied_Vol>0.0001) #eliminate meaningless implied vol
head(newdf)
todr <- order(table(newdf$Tm), decreasing = T)[1:4]
T1 <- as.numeric(names(table(newdf$Tm)[todr]))
K1 <- newdf$K[newdf$Tm==T1[1]]
K2 <- newdf$K[newdf$Tm==T1[2]]
K3 <- newdf$K[newdf$Tm==T1[3]]
K4 <- newdf$K[newdf$Tm==T1[4]]
common_element=intersect(intersect(K1,K2),intersect(K3,K4))[1:20]
dfselect <- subset(newdf, Tm %in% T1 & K %in% common_element)
a <- order(dfselect[, 1], dfselect[, 2])
dfselect <- dfselect[a, ]
if (nrow(dfselect) < 80) {print("No enough option data")}
plot_ly(x=dfselect$K, y=dfselect$Tm, z=dfselect$Implied_Vol)
newdf
todr <- order(table(newdf$Tm), decreasing = T)[1:4]
T1 <- as.numeric(names(table(newdf$Tm)[todr]))
K1 <- newdf$K[newdf$Tm==T1[1]]
K2 <- newdf$K[newdf$Tm==T1[2]]
K3 <- newdf$K[newdf$Tm==T1[3]]
K4 <- newdf$K[newdf$Tm==T1[4]]
temp <- intersect(intersect(K1,K2),intersect(K3,K4))
l <- length(temp)
l
common_element=temp[(floor(l/2)-9):(floor(l/2)+10)]
common_element
dfselect <- subset(newdf, Tm %in% T1 & K %in% common_element)
a <- order(dfselect[, 1], dfselect[, 2])
dfselect <- dfselect[a, ]
if (nrow(dfselect) < 80) {print("No enough option data")}
plot_ly(x=dfselect$K, y=dfselect$Tm, z=dfselect$Implied_Vol)
library(akima)
library(rgl)
y <- dfselect$Tm
x <- dfselect$K
z <- dfselect$Implied_Vol
n_interpolation <- 200
spline_interpolated <- interp(x, y, z,
xo=seq(min(x), max(x), length = n_interpolation),
yo=seq(min(y), max(y), length = n_interpolation),
linear = T)
x.si <- spline_interpolated$x
y.si <- spline_interpolated$y
z.si <- spline_interpolated$z
plot_ly(x=x.si, y=y.si, z=z.si, type = "surface")
local_vol <- function(Tm, K, price) {
# Square of local volatility
S0 <- price0
deltaT <- 0.001*Tm
deltaK <- 0.001*K
sig <- imp_vol(Tm, K, price)
d1 <- (log(S0/K) + (r0 - div + sig^2/2)*(Tm))/sig/sqrt(Tm)
dT1 <- (imp_vol(Tm+deltaT, K, price) - imp_vol(Tm, K, price))/deltaT
dK1 <- (imp_vol(Tm, K+deltaK, price) - imp_vol(Tm, K, price))/deltaK
dK2 <- (imp_vol(Tm, K+deltaK, price) - 2*imp_vol(Tm, K, price)
+ imp_vol(Tm, K-deltaK, price))/deltaK^2
numerator <- 2*sig*dT1*Tm + sig^2 + 2*sig*(r0-div)*Tm*K*dK1
denominator <- (1 +K*d1*dK1*sqrt(Tm))^2 + K^2*Tm*sig*(dK2 - d1*dK2^2*sqrt(Tm))
lsigma <- numerator/denominator
return(lsigma)
}
Local_Vol <- dfselect[, 1]
for(i in 1:nrow(dfselect)) {
# calculate local vols
price <- dfselect[i, 3]
Tm <- dfselect[i, 1]
K <- dfselect[i, 2]
Local_Vol[i] <- local_vol(Tm, K, price)
}
head(Local_Vol)
dfselect <- cbind(dfselect, Local_Vol)
Tm <- dfselect[1, 1]
K <- dfselect[1, 2]
b <- dfselect[1, 5]
Option_Ex <- function(Tm, K, b, N, Nj) {
# precompute constants
dt <- Tm/N
dx <- 0.2
# initialise asset prices at maturity
St <- seq(1,2*Nj+1)
St <- price0 + dx*(St-1-Nj)
# initialise option values at maturity
C <- matrix(0, ncol = (N + 1), nrow = (2*Nj + 1))
C[, N+1] <- pmax(C[, N+1], St - K)
# step back
for (i in N:1) {
for(j in (2-i+N):(2*Nj+i-N)) {
dCdS <- (C[j+1, i+1] - 2*C[j, i+1] + C[j-1, i+1])/dx^2
dCdt <- -b/2*dCdS
C[j, i] <- C[j, i+1] - dCdt*dt
}
}
ans <- C[Nj+1, 1]
return(ans)
}
Option_Ex <- function(Tm, K, b, N, Nj) {
# precompute constants
dt <- Tm/N
dx <- 0.2
# initialise asset prices at maturity
St <- seq(1,2*Nj+1)
St <- price0 + dx*(St-1-Nj)
# initialise option values at maturity
C <- matrix(0, ncol = (N + 1), nrow = (2*Nj + 1))
C[, N+1] <- pmax(C[, N+1], St - K)
# step back
for (i in N:1) {
for(j in (2-i+N):(2*Nj+i-N)) {
dCdS <- (C[j+1, i+1] - 2*C[j, i+1] + C[j-1, i+1])/dx^2
dCdt <- -b/2*dCdS
C[j, i] <- C[j, i+1] - dCdt*dt
}
}
ans <- C[Nj+1, 1]
return(ans)
}
PricebyD <- dfselect[, 1]
N <- 500
Nj <- 300
for(k in 1:nrow(dfselect)) {
# calculate option price by Dupire’s local vol
Tm <- dfselect[k, 1]
K <- dfselect[k, 2]
b <- dfselect[k, 5]
PricebyD[i] <- Option_Ex(Tm, K, b, N, Nj)
}
PricebyD
dfselect <- cbind(dfselect, PricebyD)
write.xlsx(dfselect, "SPXvolatility.xls", row.names = F) # write xlsx file
library(xlsx)
library(plotly)
library(quantmod)
SPX <- read.xlsx("SPX.xls", sheetName = "QuoteData-1", header=F) # read data
#SPX <- read.xlsx("AAPL.xls", sheetName = "QuoteData-1", header=F) # read data
SPX <- SPX[colSums(!is.na(SPX)) > 0] # omit NA columns
SPX <- SPX[rowSums(!is.na(SPX)) > 0, ] # omit NA rows
date0 <- as.numeric(as.character(SPX[1, 1]))
price0 <-as.numeric(as.character(SPX[1, 2]))
r0 <- as.numeric(as.character(SPX[1, 3]))/100
div <- 0
colnames(SPX) <- c("Date", "Tm", "K", "Price")
SPX <- SPX[-c(1, 2), ]
for (i in 1:4) { # Convert factor to numeric
SPX[, i] <- as.numeric(as.character(SPX[, i]))
}
SPX <- SPX[!duplicated(SPX[, 2:3], fromLast = T), ]
head(SPX)
# a -----------------------------------------------------------------------
Option_BSM <- function(S0, K, Tm, sigma, r=r0, div=0) {
# Pricing by Black Scholes
d1 <- (log(S0/K) + (r - div + sigma^2/2)*Tm)/sigma/sqrt(Tm)
d2 <- d1 - sigma*sqrt(Tm)
p <- S0*exp(-div*Tm)*pnorm(d1) - K*exp(-r*Tm)*pnorm(d2)
return(p)
}
fsigma <- function(sigma, Tm, K, price) {
# Epsilon. To calculate implied vol
S0 <- price0
price.by.bs <- Option_BSM(S0, K, Tm, sigma)
ans <- price.by.bs - price
return(ans)
}
imp_vol <- function(Tm, K, price) {
# use bisection method to calculate implied vols
a <- 0.0001
b <- 10
epsilon <- abs(a - b)
while(epsilon > 1e-4) {
mid <- (a + b)/2
if (fsigma(mid, Tm, K, price)*fsigma(b, Tm, K, price) < 0 ) a <- mid
else b <- mid
epsilon <- abs(a - b)
}
return(a)
}
Implied_Vol <- SPX[, 1]
for(i in 1:nrow(SPX)) {
price <- SPX[i, 4]
Tm <- SPX[i, 2]
K <- SPX[i, 3]
Implied_Vol[i] <- imp_vol(Tm, K, price)
}
head(Implied_Vol)
newdf <- data.frame(SPX[, -1], Implied_Vol)
newdf <- subset(newdf, Implied_Vol>0.0001) #eliminate meaningless implied vol
head(newdf)
# To find 20 different strike prices and 4 different maturities
todr <- order(table(newdf$Tm), decreasing = T)[1:4]
T1 <- as.numeric(names(table(newdf$Tm)[todr]))
K1 <- newdf$K[newdf$Tm==T1[1]]
K2 <- newdf$K[newdf$Tm==T1[2]]
K3 <- newdf$K[newdf$Tm==T1[3]]
K4 <- newdf$K[newdf$Tm==T1[4]]
temp <- intersect(intersect(K1,K2),intersect(K3,K4))
l <- length(temp)
common_element=temp[(floor(l/2)-9):(floor(l/2)+10)]
dfselect <- subset(newdf, Tm %in% T1 & K %in% common_element)
a <- order(dfselect[, 1], dfselect[, 2])
dfselect <- dfselect[a, ]
if (nrow(dfselect) < 80) {print("No enough option data")}
plot_ly(x=dfselect$K, y=dfselect$Tm, z=dfselect$Implied_Vol)
# b -----------------------------------------------------------------------
library(akima)
library(rgl)
x <- dfselect$K
y <- dfselect$Tm
z <- dfselect$Implied_Vol
# linear interpolation
n_interpolation <- 200
spline_interpolated <- interp(x, y, z,
xo=seq(min(x), max(x), length = n_interpolation),
yo=seq(min(y), max(y), length = n_interpolation),
linear = T)
x.si <- spline_interpolated$x
y.si <- spline_interpolated$y
z.si <- spline_interpolated$z
plot_ly(x=x.si, y=y.si, z=z.si, type = "surface")
# c -----------------------------------------------------------------------
# NO
# d -----------------------------------------------------------------------
# local volatility
local_vol <- function(Tm, K, price) {
# Square of local volatility
S0 <- price0
deltaT <- 0.001*Tm
deltaK <- 0.001*K
sig <- imp_vol(Tm, K, price)
d1 <- (log(S0/K) + (r0 - div + sig^2/2)*(Tm))/sig/sqrt(Tm)
dT1 <- (imp_vol(Tm+deltaT, K, price) - imp_vol(Tm, K, price))/deltaT
dK1 <- (imp_vol(Tm, K+deltaK, price) - imp_vol(Tm, K, price))/deltaK
dK2 <- (imp_vol(Tm, K+deltaK, price) - 2*imp_vol(Tm, K, price)
+ imp_vol(Tm, K-deltaK, price))/deltaK^2
numerator <- 2*sig*dT1*Tm + sig^2 + 2*sig*(r0-div)*Tm*K*dK1
denominator <- (1 +K*d1*dK1*sqrt(Tm))^2 + K^2*Tm*sig*(dK2 - d1*dK2^2*sqrt(Tm))
lsigma <- numerator/denominator
return(lsigma)
}
Local_Vol <- dfselect[, 1]
for(i in 1:nrow(dfselect)) {
# calculate local vols
price <- dfselect[i, 3]
Tm <- dfselect[i, 1]
K <- dfselect[i, 2]
Local_Vol[i] <- local_vol(Tm, K, price)
}
head(Local_Vol)
dfselect <- cbind(dfselect, Local_Vol)
# e -----------------------------------------------------------------------
# Solve the PDE
# European Call option - Explicit Finite Difference method
Option_Ex <- function(Tm, K, b, N, Nj) {
# precompute constants
dt <- Tm/N
dx <- 0.2
# initialise asset prices at maturity
St <- seq(1,2*Nj+1)
St <- price0 + dx*(St-1-Nj)
# initialise option values at maturity
C <- matrix(0, ncol = (N + 1), nrow = (2*Nj + 1))
C[, N+1] <- pmax(C[, N+1], St - K)
# step back
for (i in N:1) {
for(j in (2-i+N):(2*Nj+i-N)) {
dCdS <- (C[j+1, i+1] - 2*C[j, i+1] + C[j-1, i+1])/dx^2
dCdt <- -b/2*dCdS
C[j, i] <- C[j, i+1] - dCdt*dt
}
}
ans <- C[Nj+1, 1]
return(ans)
}
PricebyD <- dfselect[, 1]
N <- 500
Nj <- 300
for(k in 1:nrow(dfselect)) {
# calculate option price by Dupire’s local vol
Tm <- dfselect[k, 1]
K <- dfselect[k, 2]
b <- dfselect[k, 5]
PricebyD[i] <- Option_Ex(Tm, K, b, N, Nj)
}
PricebyD
# f -----------------------------------------------------------------------
dfselect <- cbind(dfselect, PricebyD)
write.xlsx(dfselect, "SPXvolatility.xls", row.names = F) # write xlsx file
setwd("/Users/apple/Desktop/621final")
read.csv(Multivariate.data, "P2_Monte_Carlo.csv")
library(quantmod)
library(Sim.DiffProc)
setwd("/Users/apple/Desktop/621final")
# 1 -----------------------------------------------------------------------
# XLF
# Financial Select Sector SPDR Fund
# Top 20 tickers:
# JPM	JP Morgan Chase & Co
# BRK-B	Berkshire Hathaway B
# WFC	Wells Fargo & Co
# BAC	Bank of America Corp
# C	Citigroup Inc
# GS	Goldman Sachs Group Inc
# USB	US Bancorp
# CB	Chubb Limited
# MS	Morgan Stanley
# AXP	American Express Co
# PNC	PNC Finl Services Group
# AIG	American Intl Group Inc
# MET	Metlife Inc
# BK	The Bank of New York Mellon Corp
# SCHW	Schwab Charles Corp
# BLK	BlackRock Inc
# PRU	Prudential Financial Inc
# CME	CME Group Inc A
# COF	Capital One Financial
# MMC	Marsh & McLennan Companies
# Download data
sbls <- c("JPM", "BRK-B", "WFC", "BAC", "C", "GS", "USB", "CB", "MS", "AXP",
"PNC", "AIG", "MET", "BK", "SCHW", "BLK", "PRU", "CME", "COF", "MMC")
tickers <- data.frame(matrix(ncol = 21, nrow = 1347))
ReturnMatrix <- data.frame(matrix(ncol = 20, nrow = 1347))
for (i in 1:20) {
sbl <- sbls[i]
temp <- getSymbols(Symbols = sbl, from = "2012-01-01", to = "2017-05-10", auto.assign = F)
ReturnMatrix[, i] <- (Cl(temp)-Op(temp))/Op(temp)
tickers[, (i+1)] <- Cl(temp)
}
tickers[, 1] <- rownames(as.data.frame(temp))
colnames(tickers) <- c("Date", sbls)
colnames(ReturnMatrix) <- sbls
head(tickers)
# All prices are above $5
# Principal component analysis
tickers.pca <- prcomp(ReturnMatrix, scale. = T)
plot(tickers.pca, type = "l")
pca.summary <- summary(tickers.pca)
pca.summary
# PC7
importance <- as.data.frame(pca.summary$importance)
weight <- importance[2, 1:7]
atic <- abs(tickers.pca$rotation)
stdize <- sweep(atic, 2, colSums(atic), "/")
# Weighted sum of PC1-PC7
weightsum <- atic[, 1:7] %*% matrix(as.numeric(weight), ncol=1)
odr <- order(weightsum, decreasing = T)
order.pca <- stdize[odr, ]
rownames(order.pca)[1:4]
# 2 -----------------------------------------------------------------------
n <- c(1,3,5,7)
fit.data <- ts(tickers[, (n+1)], deltat=1/255)
model.match <- as.data.frame(matrix(nrow = 4, ncol = 2))
model.match[, 1] <- colnames(fit.data)
best.n <- c()
for (i in 1:4) {
# model A
fx1 <- expression( theta[1]*x )
gx1 <- expression( theta[2]*x )
mod1 <- fitsde(data=fit.data[, i], drift=fx1, diffusion=gx1,
start = list(theta1=.1, theta2=.1), pmle="euler")
# model B
fx2 <- expression( theta[1]+theta[2]*x )
gx2 <- expression( theta[3]*x^theta[4] )
mod2 <- fitsde(data=fit.data[, i], drift=fx2, diffusion=gx2,
start = list(theta1=.1,theta2=.1,theta3=.1,theta4=.1), pmle="euler")
# model C
fx3 <- expression( theta[1]*x )
gx3 <- expression( theta[2]+theta[3]*x^theta[4] )
mod3 <- fitsde(data=fit.data[, i], drift=fx3, diffusion=gx3,
start = list(theta1=.1,theta2=.1,theta3=.1,theta4=.1), pmle="euler")
# model D
fx4 <- expression( theta[1]*x )
gx4 <- expression( theta[2]*x^(3/2) )
mod4 <- fitsde(data = fit.data[, i], drift=fx4, diffusion=gx4,
start = list(theta1=.1,theta2=.1), pmle="euler")
# model E
fx5 <- expression( theta[1]+theta[2]*x )
gx5 <- expression( (theta[3]+theta[4]*log(x))*x )
mod5 <- fitsde(data=fit.data[, i], drift=fx5, diffusion=gx5,
start = list(theta1=.1,theta2=.1,theta3=.1,theta4=.1), pmle="euler")
# Computes AIC
AIC <- c(AIC(mod1),AIC(mod2),AIC(mod3),AIC(mod4),AIC(mod5))
k <- which.min(AIC)
best.n[i] <- k
best <- paste0("model", k)
model.match[i, 2] <- best
}
model.match # All model 1
# Coefficients
coefs <- data.frame(matrix(nrow = 4, ncol = 3))
coefs[, 1] <- model.match[, 1]
for (i in 1:4) {
# model A
fx1 <- expression( theta[1]*x )
gx1 <- expression( theta[2]*x )
mod1 <- fitsde(data=fit.data[, i], drift=fx1, diffusion=gx1,
start = list(theta1=.1, theta2=.1), pmle="euler")
coefs[i, 2:3] <- coef(mod1)
}
coefs
# 3 -----------------------------------------------------------------------
corrmatrix <- cor(fit.data)
corrmatrix
# 4 -----------------------------------------------------------------------
S0 <- fit.data[1, ]
monte_carlo_corr <- function(S0, Tm=1, dt=1/255, n=1000, corr=corrmatrix) {
# S0: Initial stock prices
# Tm: Time to maturity
# dt: Time interval
# n:  Quantity of paths
# corr: Correlation matrix
R <- chol(corrmatrix)
L <- t(R)
STj <- data.frame(matrix(ncol = 4, nrow = n))
for (j in 1:n) {
dZt <- matrix(rnorm(4*Tm/dt)*sqrt(dt), nrow = 4)
dWt <- L %*% dZt
St <- S0
for (i in 1:(Tm/dt)) {
drift <- St*coefs[, 2]*dt
diffusion <- coefs[, 3]*dWt[, i]
diffusion[1] <- diffusion[1]*St[1]
diffusion[2] <- diffusion[2]*St[2]
diffusion[3] <- diffusion[3]*St[3]
diffusion[4] <- diffusion[4]*St[4]
St <- St + drift + diffusion
}
STj[j, ] <- St
}
return(STj)
}
STj <- monte_carlo_corr(S0)
STj
statistics <- do.call(data.frame,
list(mean = apply(STj, 2, mean),
sd = apply(STj, 2, sd),
skewness = apply(STj, 2, skewness),
kurtosis = apply(STj, 2, kurtosis)))
statistics
# 5 -----------------------------------------------------------------------
XLF <- getSymbols(Symbols = "XLF", from = "2012-01-01", to = "2017-05-10", auto.assign = F)
XLF.close <- ts(as.numeric(XLF$XLF.Close), deltat=1/255)
# model A - geometric Brownian motion
fx1 <- expression( theta[1]*x )
gx1 <- expression( theta[2]*x )
mod1 <- fitsde(data=XLF.close, drift=fx1, diffusion=gx1,
start = list(theta1=.1, theta2=.1), pmle="euler")
coef <- coef(mod1)
S0 <- XLF.close[1]
monte_carlo <- function(S0, Tm=1, dt=1/255, n=1000) {
ST <- data.frame(matrix(ncol = 1, nrow = n))
for (j in 1:n) {
dWt <- rnorm(Tm/dt)*sqrt(dt)
St <- S0
for (i in 1:(Tm/dt)) {
drift <- St*coef[1]*dt
diffusion <- St*coef[2]*dWt[i]
St <- St + drift + diffusion
}
ST[j, 1] <- St
}
return(ST)
}
XLF.MC <- monte_carlo_corr(S0)
XLF.MC[, 1]
MCsimulations <- cbind(STj, XLF.MC[, 1])
colnames(MCsimulations) <- c("JPM", "WFC", "C", "USB", "XLF")
write.csv(MCsimulations, file = "MCsimulations.csv", row.names = F)
# 6 -----------------------------------------------------------------------
Multivariate.data <- as.data.frame(cbind(fit.data, XLF.close))
read.csv(Multivariate.data, "P2_Monte_Carlo.csv")
write.csv(Multivariate.data, "P2_Monte_Carlo.csv")
lm.fit <- lm(XLF.close~. + 0, data = Multivariate.data, row.names = F)
write.csv(Multivariate.data, "P2_Monte_Carlo.csv", row.names = F)
Multivariate.data
write.csv(Multivariate.data, "P2_Monte_Carlo.csv", row.names = F)
